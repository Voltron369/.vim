*gerard.txt*    Documentation for Gerard's vimrc

==============================================================================
CUSTOM BINDINGS                                                         *gerard*

<Leader> is <Space>

⎵ ?       This Help
⎵ ⎵       |:update|
+ or \    Toggle :Git |fugitive-summary|
gd        Go To Definition or default |gd|           |CocAction('jumpDefinition')|
gr        Fzf References                           |CocAction('jumpReferences')|
⎵ gc      |:Commits|
⎵ f/F     |:GFiles|/|:Files|
⎵ gg/ag   |:GGrep|/|:Ag|
-         netrw |:Explore|
m<CR>     |:Make|
`<Space>  |:Dispatch|
⎵ u       Toggle Undo Tree

Tabs and Windows:~
⎵ c       close tab and go to previous tab
gq        quit window.  If last, close tab and go to previous tab
dq        quit diff
C-PgDown  next tab
C-PgUp    prev tab
⎵ aa      append current buffer name to |args| ($|argadd|)
⎵ ar      fzf |args|
:Ar[gs]   |:args| with count and picker
["x]⎵t    mark tab in register x (use @x to go to tab)
⎵ z       zoom window or diff (toggle)

Find:~
⎵ b       |:Buffers|
⎵ f       |:GFiles|
⎵ F       |:Files|
⎵ ag      |:Ag|
⎵ gc      |:Commits|
⎵ gC      |:BCommits|
⎵ gg      fzf git grep
⎵ gb      |:GBranches|
⎵ gw      |:GWorktree|
Ctrl-/    Search in File                                               |:BLines|
q:        fzf command |:History|:                                 |q:| or |c_CTRL-F|
q/        fzf search |:History|/                                  |q/|| or |c_CTRL-F|
q?        fzf vim help |:Helptags|
see |gerardfzf|

:GWorktree    fzf git worktree list
                         :   populate command line with worktree path
                         ;   populate command line with new worktree
                    ctrl-n   new detached worktree of origin/master
                  ctrl-d/r   remove worktree
                    ctrl-y   yank
:GBranches    fzf git branches/checkout/merge/etc (|fzf-checkout|)
                         :   populate command line with branch
                         ;   populate command line new worktree
                    ctrl-w   new worktree of branch
                    ctrl-y   yank
:Messages     fzf error |:messages|
:CHistory     fzf quickfix |:chistory|
                                                                      *gitlog*
Git Log:~
⎵ gc    fzf git log                                                |:Commits|
⎵ gC    fzf git log %  (supports visual select of code lines)      |:BCommits|
⎵ gl    git log in quickfix
⎵ gn    git log in quickfix (filenames only)
⎵ ml    git log vs merge-base
⎵ mn    git log vs merge-base (filenames only)
⎵ ms    git log vs merge-base (status only)
                                                                     *gitdiff*
Git Diff:~
              working vs HEAD~
⎵ gF    git status (see |fugitive-staging-maps|)
⎵ gf    git diff <cfile> working vs HEAD
⎵ gd    git diff current file working vs HEAD
⎵ gD    git diff all files working vs HEAD

            working vs merge-base~
⎵ mF    git diff names-only working vs merge-base
⎵ mf    git diff <cfile> working vs merge-base
⎵ md    git diff current file working vs merge-base
⎵ mD    git diff all files working vs merge-base

              HEAD vs merge-base (PR)~
⎵ pF    git diff names-only HEAD vs merge-base
⎵ pf    git diff <cfile> HEAD vs merge-base
⎵ pd    git diff current file HEAD vs merge-base
⎵ pD    git diff all files HEAD vs merge-base

            staged vs head~
⎵ sF    git diff names-only staged vs HEAD
⎵ sf    git diff <cfile> staged vs HEAD
⎵ sd    git diff current file staged vs HEAD
⎵ sD    git diff all files staged vs HEAD

                                                                  *gerard-coc*
COC: (see |coc-introduction|)~
gd          Go To Definition or default |gd|         |CocAction('jumpDefinition')|
gy          Go To Type Definition              |CocAction('jumpTypeDefinition')|
gi          Go To Implementation               |CocAction('jumpImplementation')|
gr          Fzf References                         |CocAction('jumpReferences')|
gh          Switch hpp/cpp
gH          VSplit hpp/cpp
K           Hover or default |K|                            |CocAction('doHover')|
⎵ rn        Rename                                         |CocAction('rename')|
=           Format or default |=|                    |CocAction('formatSelected')|
⎵ a{motion} Code Action (selected)                     |CocAction('codeAction')|
⎵ ac        Code Action (cursor)                       |CocAction('codeAction')|
⎵ as        Code Action (buffer)                       |CocAction('codeAction')|
⎵ qf        Quick Fix                                  |CocAction('doQuickfix')|
⎵ re        Refactor                                     |CocAction('refactor')|
⎵ cl        Code Lens                              |CocAction('codeLensAction')|
[G [g       first/prev diagnostic
]g ]G       next/last diagnostic

                                                                 *gerardmerge*
Merge:~
:Merge      Show files with merge conflicts in new split
<C-W><C-F>  Open file under cursor in new vertical split (and go to first merge conflict)
]n          Next merge conflict (|unimpaired|, |]n|)
[n          Previous merge conflict (|unimpaired|, |[n|)

Sensible:~
%             Uses |matchit|
j             Delete comment character when joining commented lines.
Ctrl-L        Also clears search highlighting (|:noh|) and calls |:diffupdate|
:DiffOrig     Diff vs saved version of file (|:DiffOrig|)
:Man {page}   Show man page in new split (|:Man})
:PlugStatus   See plugins in use

text-object:~
ic/ac   classobj
if/af   funcobj
ih/ah   hunk (|gitgutter-ic|)

colorscheme:~
gerard        dark
morning       bright

netrw:~
<Tab>        mark/unmark file and down
<S-Tab>      mark/unmark file and move up
:            Populate a command line with the marked files, target directory
;            Populate a command line with the marked files
g:           Populate a command line with the target directory
qb           FZF (directory) bookmark list (:Historyb)
:NetrwMB!    Clear (directory) bookmark list

JSON:~
⎵ jq      preview pretty     (set filetype json)
s         preview pretty     (for filetype json)
⎵ jt      toggle pretty/mini (set filetype json)
S         toggle pretty/mini (for filetype json)

FZF:~                                                             *gerardfzf*
     :    Populate command line
Ctrl-y    Yank filename(s)

Ctrl-t    Open in Tab
Ctrl-v    Open in vertical split
Ctrl-x    Open in split

Ctrl-b    Page Up
Ctrl-u    Page Up Half
Ctrl-d    Page Down Half
Ctrl-f    Page Down


vim:tw=78:ts=8:ft=help:norl:
